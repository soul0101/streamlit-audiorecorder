{"version":3,"sources":["AudioRecorder.tsx","index.tsx"],"names":["BlobToDataURL","blob","Promise","resolve","reader","FileReader","addEventListener","result","readAsDataURL","AudioRecorder","state","recording","recorder","render","props","args","record_prompt","recording_prompt","onClick","onClicked","disabled","className","style","marginBottom","stop","start","setState","prevState","navigator","mediaDevices","getUserMedia","audio","then","mediaStreamObj","MediaRecorder","ondataavailable","data","audioData","Blob","type","audioData_str","replace","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":";6iNAYA,SAASA,EAAcC,GACrB,OAAO,IAAIC,SAAQ,SAAAC,GACf,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,WAAW,kBAAMH,EAAQC,EAAOG,WACxDH,EAAOI,cAAcP,M,IAIrBQ,E,4MACGC,MAAc,CAAEC,WAAW,EAAOC,SAAU,M,EAgB5CC,OAAS,WACd,MAA0C,EAAKC,MAAMC,KAA9CC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,iBAEtB,OACE,8BACE,4BACEC,QAAS,EAAKC,UACdC,SAAU,EAAKN,MAAMM,SACrBC,UAAU,4BACVC,MAAO,CAACC,aAAc,QAErB,EAAKb,MAAMC,UAAYM,EAAmBD,K,EAM3CG,UAAY,WAClB,IAAMP,EAAW,EAAKF,MAAME,SACxB,EAAKF,MAAMC,UACbC,EAASY,OAETZ,EAASa,QAGX,EAAKC,UACH,SAAAC,GAAS,MAAK,CAAEhB,WAAYgB,EAAUhB,e,uDAxC1C,WAAkC,IAAD,OAC/BiB,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAC5CC,MAAK,SAACC,GACL,IAAMrB,EAAW,IAAIsB,cAAcD,GACnC,EAAKP,SAAS,CAAEd,aAEhBA,EAASuB,gBAAT,uCAA2B,gGAAQC,EAAR,EAAQA,KAC3BC,EAAY,IAAIC,KAAK,CAACF,GAAO,CAACG,KAAM,cADjB,SAEIvC,EAAcqC,GAFlB,OAEnBG,EAFmB,OAE8BC,QAAQ,mBAAoB,IACnFC,IAAUC,kBAAkBH,GAHH,2CAA3B,6D,GATsBI,KAgDbC,cAAwBpC,GChEvCqC,IAASjC,OACP,kBAAC,IAAMkC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.72bb61ad.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  recording: boolean,\n  recorder: MediaRecorder | null,\n}\n\nfunction BlobToDataURL(blob: Blob) {\n  return new Promise(resolve => {\n      const reader = new FileReader();\n      reader.addEventListener(\"loadend\", () => resolve(reader.result as string));\n      reader.readAsDataURL(blob);\n  }) as Promise<string>;\n}\n\nclass AudioRecorder extends StreamlitComponentBase<State> {\n  public state:State = { recording: false, recorder: null };\n\n  public componentDidMount(): void {\n    navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((mediaStreamObj) => {\n      const recorder = new MediaRecorder(mediaStreamObj);\n      this.setState({ recorder });\n\n      recorder.ondataavailable = async ({data}) => {\n        const audioData = new Blob([data], {type: \"audio/mp3\"});\n        const audioData_str = (await BlobToDataURL(audioData)).replace(/^data:.+?base64,/, \"\");\n        Streamlit.setComponentValue(audioData_str);\n      }\n    });\n  }\n\n  public render = (): ReactNode => {\n    const {record_prompt, recording_prompt} = this.props.args;\n\n    return (\n      <span>        \n        <button\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          className=\"btn btn-outline-secondary\"\n          style={{marginBottom: \"1px\"}}\n        >\n          {this.state.recording ? recording_prompt : record_prompt}\n        </button>\n      </span>\n    )\n  }\n\n  private onClicked = (): void => {\n    const recorder = this.state.recorder as MediaRecorder;\n    if (this.state.recording) {\n      recorder.stop();\n    } else {\n      recorder.start();\n    }\n\n    this.setState(\n      prevState => ({ recording: !prevState.recording }),\n    )\n  }\n}\n\nexport default withStreamlitConnection(AudioRecorder)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AudioRecorder from \"./AudioRecorder\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AudioRecorder />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}